import javax.crypto.Cipher;
import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author nikos
 */
public class MainForm extends javax.swing.JFrame {
    String user;

    //Main form constructor
    public MainForm(String username) {
        user = username;
        initComponents();
        this.setLocationRelativeTo(null);
        refreshList("appFiles/" + username);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButtonOpen = new javax.swing.JButton();
        jButtonCrypt = new javax.swing.JButton();
        jButtonDecrypt = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabelMin = new javax.swing.JLabel();
        jLabelClose = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(51, 110, 123));

        jButton1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jButton1.setText("Add ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButtonOpen.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jButtonOpen.setText("Open");
        jButtonOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOpenActionPerformed(evt);
            }
        });

        jButtonCrypt.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jButtonCrypt.setText("Crypt");
        jButtonCrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    jButtonCryptActionPerformed(evt);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        jButtonDecrypt.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jButtonDecrypt.setText("Decrypt");
        jButtonDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    jButtonDecryptActionPerformed(evt);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        jScrollPane1.setViewportView(jList1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jButtonOpen, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jButtonCrypt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonDecrypt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(63, 63, 63)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonOpen)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonCrypt)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonDecrypt)))
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(36, 37, 42));

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(242, 241, 240));
        jLabel1.setText("Crypt n Decrypt Files");

        jLabelMin.setFont(new java.awt.Font("Ubuntu", 1, 28)); // NOI18N
        jLabelMin.setForeground(new java.awt.Color(242, 241, 240));
        jLabelMin.setText("-");
        jLabelMin.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabelMin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelMinMouseClicked(evt);
            }
        });

        jLabelClose.setFont(new java.awt.Font("Ubuntu", 1, 22)); // NOI18N
        jLabelClose.setForeground(new java.awt.Color(242, 241, 240));
        jLabelClose.setText("x");
        jLabelClose.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabelClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    jLabelCloseMouseClicked(evt);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelMin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelClose, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelClose)
                    .addComponent(jLabelMin, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Add files to your crypt
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        String filename = f.getAbsolutePath();
        String OnlyFilename = f.getName();
        String path = "appFiles/" + user + "/";
        String complete = path.concat(OnlyFilename);
        Path sourceDirectory = Paths.get(filename);
        Path targetDirectory = Paths.get(complete);
        try {
            Files.copy(sourceDirectory, targetDirectory);
        } catch (IOException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        refreshList(path);
    }

    //Open files of your crypt
    private void jButtonOpenActionPerformed(java.awt.event.ActionEvent evt) {
        String pattern = jList1.getSelectedValue();
        String path = "appFiles/" + user + "/";
        String complete = path.concat(pattern);
        File f = new File(complete);
        if(!Desktop.isDesktopSupported()){
            System.out.print("Desktop is not supported");
        }
        Desktop desktop = Desktop.getDesktop();
        if(f.exists()) try {
            desktop.open(f);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //Encrypt files on your crypt
    private void jButtonCryptActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
        String pattern = jList1.getSelectedValue();
        String path = "appFiles/" + user + "/";
        String complete = path.concat(pattern);
        Crypto crypto = new Crypto();
        String key = crypto.SymmetricKey(path);
	    File inputFile = new File(complete);
	    File encryptedFile = new File(complete + "-crypt");
        //create the encrypted file
	    crypto.fileProcessor(Cipher.ENCRYPT_MODE, key, inputFile, encryptedFile);
        //delete original file after encryption
        if(inputFile.exists()) {
            inputFile.delete();
        }
        refreshList(path);
        
    }

    //Decrypt encrypted on your crypt
    private void jButtonDecryptActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
        String pattern = jList1.getSelectedValue();
        String path = "appFiles/" + user + "/";
        String complete = path + pattern;
        Crypto crypto = new Crypto();
        String key = crypto.SymmetricKey(path);
        int i = complete.length();
        File encryptedFile = new File(complete);
        File decryptedFile = new File(complete.substring(0, i-6));
        //decrypt file chosen
        crypto.fileProcessor(Cipher.DECRYPT_MODE, key, encryptedFile, decryptedFile);
        //delete encrypted file afted decryption
        if(encryptedFile.exists()) {
            encryptedFile.delete();
        }
        refreshList(path);
    }
    //Minimize window
    private void jLabelMinMouseClicked(java.awt.event.MouseEvent evt) {
        this.setState(JFrame.ICONIFIED);
    }
    //Close window
    private void jLabelCloseMouseClicked(java.awt.event.MouseEvent evt) throws Exception {
        //encrypt any decrtypted file on the crypt
        String path = "appFiles/" + user + "/";
        String files = null;
        File folder = new File(path);
        File[] listofFiles = folder.listFiles();
        for(int i = 0; i < listofFiles.length; i++){
            files = listofFiles[i].getName();
            int j = files.length();
            if(!("-crypt".equals(files.substring(j-6)))){
                Crypto crypto = new Crypto();
                String key = crypto.SymmetricKey(path);
                File inputFile = new File(path + files);
                if(("symmetricKey.txt".equals(files)) || ("encryptedSignature.txt".equals(files))){
                    continue;
                }else {
                    File encryptedFile = new File(path + files + "-crypt");
                    crypto.fileProcessor(Cipher.ENCRYPT_MODE, key, inputFile, encryptedFile);
                    if (inputFile.exists()) {
                        inputFile.delete();
                    }
                }
            }
        }
        //create the encrypted signature of your crypt
        IntegrityCheck ic = new IntegrityCheck();
        String output = ic.signature(path);
        File file = new File(path + "/encryptedSignature.txt");
        FileWriter out = new FileWriter(file);
        out.write(output);
        out.close();
        System.exit(0);
    }
    //refresh list method
    void refreshList(String path){

        DefaultListModel dlm = new DefaultListModel();
        String files = null;
        File folder = new File(path);
        File[] listofFiles = folder.listFiles();
        for(int i = 0; i < listofFiles.length; i++){
            files = listofFiles[i].getName();

            dlm.addElement(files);

        }
        jList1.setModel(dlm);
    }

    //Variables declaration
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonCrypt;
    private javax.swing.JButton jButtonDecrypt;
    private javax.swing.JButton jButtonOpen;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelClose;
    private javax.swing.JLabel jLabelMin;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    //End of variables declaration
    
}
